#+TITLE: Emacs Configuration
#+AUTHOR: Thomas Lockney
#+EMAIL: thomas@lockney.net
#+begin_src emacs-lisp
  (require 'midnight)
#+end_src
* General Config
** Set some basic shortcuts
#+begin_src emacs-lisp
(defalias 'tf 'toggle-frame-fullscreen)
(defalias 'tff 'toggle-frame-fullscreen)
#+end_src
** Make sure important bits are in our path
#+begin_src emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
#+end_src
* Make org-mode a bit better
** This is largely borrowed from Howard Abrams’ Emacs config.
#+begin_src emacs-lisp
(when (display-graphic-p)
  (defface org-block-begin-line
    '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#002E41")))
    "Face used for the line delimiting the begin of source blocks.")
  (defface org-block-background
    '((t (:background "#111111")))
    "Face used for the source block background.")
  (defface org-block-end-line
    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#002E41")))
    "Face used for the line delimiting the end of source blocks.")
  (deftheme tl/org-theme "My org-mode sub theme")

  (custom-set-faces
   '(org-block-begin-line
     ((t (:foreground "#008ED1" :background "#002E41"))))
   '(org-block-background
     ((t (:background "#111111"))))
   '(org-block-end-line
     ((t (:foreground "#008ED1" :background "#002E41")))))
   (let* ((sans-font (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                           ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                           ((x-list-fonts "Verdana")         '(:font "Verdana"))
                           ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                           (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
          (base-font-color  (face-foreground 'default nil 'default))
          (background-color (face-background 'default nil 'default))
          (primary-color    (face-foreground 'mode-line nil))
          (secondary-color  (face-background 'secondary-selection nil 'region))
          (headline        `(:inherit default :weight bold :foreground ,base-font-color)))
     (custom-theme-set-faces 'tl/org-theme
                             `(org-agenda-structure ((t (:inherit default ,@sans-font :height 2.0 :underline nil))))
                             `(org-level-8 ((t (,@headline ,@sans-font))))
                             `(org-level-7 ((t (,@headline ,@sans-font))))
                             `(org-level-6 ((t (,@headline ,@sans-font))))
                             `(org-level-5 ((t (,@headline ,@sans-font))))
                             `(org-level-4 ((t (,@headline ,@sans-font :height 1.1))))
                             `(org-level-3 ((t (,@headline ,@sans-font :height 1.25))))
                             `(org-level-2 ((t (,@headline ,@sans-font :height 1.5))))
                             `(org-level-1 ((t (,@headline ,@sans-font :height 1.75))))
                             `(org-document-title ((t (,@headline ,@sans-font :height 1.5 :underline nil)))))))
#+end_src
** Clean up the elipsis.
#+begin_src emacs-lisp
(setq org-ellipsis " ⤵")
#+end_src
** And install org-bullets for a nicer appearance.
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :defer t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** Setup file/folder locations
#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/org"
        org-default-notes-file (concat org-directory "/notes.org")
        org-agenda-files `(,org-directory))
#+end_src
** IDO completions for org-mode
#+begin_src emacs-lisp
  (setq org-completion-use-ido t)
#+end_src
** Org-mouse support
#+begin_src emacs-lisp
  (if window-system
      (require 'org-mouse))
#+end_src
** Org-capture config
#+begin_src emacs-lisp
  (require 'org-capture)
  (setq org-capture-templates
        `(
          ("n" "Note" entry
           (file+headline "notes.org" "Notes")
           "** %?")
          ("q" "Quick note" item
           (file+headline "notes.org" "Quick Notes") "- %^{Note}" :immediate-finish :kill-buffer)
          ("j" "Journal Entry" 
            entry (file+datetree "journal.org")
           "* %?" :empty-lines 1)
          ("l" "Logbook entry" entry
           (file+datetree "logbook-work.org")
           "** %U - %^{Activity}  :LOG:")
          ("t" "TODO Entry" entry
           (file+headline "todo.org" "Capture")
           (file "~/Dropbox/org/templates/todo.org.txt") :empty-lines 1)
          )
        )
  (global-set-key (kbd "C-c c") 'org-capture)

(load-file "~/.emacs.d/alfred-org-capture.el")
#+end_src
* Coding setup
** Scala
Load ENSIME ftw!
#+begin_src emacs-lisp
(use-package ensime
  :commands ensime ensime-mode
  :init
  (add-hook 'scala-mode-hook 'ensime-mode))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package cargo)
(use-package rust-mode
  :init
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (add-hook 'rust-mode-hook (lambda ()
            (local-set-key (kbd "C-c <tab>") #'rust-format-buffer))))
(use-package racer
  :init
  (setq racer-cmd "~/.cargo/bin/racer")
  (setq racer-rust-src-path "/Users/tlockn/Development/Thirdparty/rust/src")
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
(use-package flycheck-rust
  :init
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
** OCaml/Reason
#+begin_src emacs-lisp
;; Add opam emacs directory to the load-path
(setq opam-share (substring (shell-command-to-string "opam config var share 2> /dev/null") 0 -1))
(add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
;; Load merlin-mode
(require 'merlin)
;; Start merlin on ocaml files
(add-hook 'tuareg-mode-hook 'merlin-mode t)
(add-hook 'caml-mode-hook 'merlin-mode t)
#+end_src   
** Python
#+begin_src emacs-lisp
  (use-package elpy
    :config
    (progn (elyp-enable))
  )
#+end_src

* Miscellaneous
** Install writeroom-mode
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t)
#+end_src
** Use Projectile for handling projects
#+begin_src emacs-lisp
(use-package projectile
  :demand
  :init   (setq projectile-use-git-grep t)
  :config (projectile-global-mode t)
  :bind   (("s-f" . projectile-find-file)
           ("s-F" . projectile-grep)))
#+end_src
** And use IDO for better searching
#+begin_src emacs-lisp
(use-package flx-ido
  :demand
  :init
  (setq
   ido-enable-flex-matching t
   ;; C-d to open directories
   ;; C-f to revert to find-file
   ido-show-dot-for-dired nil
   ido-enable-dot-prefix t)
  :config
  (ido-mode 1)
  (ido-everywhere 1)
  (flx-ido-mode 1))
#+end_src
** Recreate Scratch buffer as needed
#+begin_src emacs-lisp
(defun switch-to-scratch-and-back ()
    "Toggle between *scratch* buffer and the current buffer.
     If the *scratch* buffer does not exist, create it."
    (interactive)
    (let ((scratch-buffer-name (get-buffer-create "*scratch*")))
        (if (equal (current-buffer) scratch-buffer-name)
            (switch-to-buffer (other-buffer))
            (switch-to-buffer scratch-buffer-name (lisp-interaction-mode)))))
(global-set-key (kbd "C-c b") 'switch-to-scratch-and-back)

#+end_src
** Make killing buffers simpler
#+begin_src emacs-lisp
(defun tl-kill-a-buffer (askp)
  (interactive "P")
  (if askp
      (kill-buffer (completing-read
                            "Kill buffer: "
                            (mapcar #'buffer-name (buffer-list))))
    (kill-this-buffer)))

(global-set-key (kbd "C-x k") 'tl-kill-a-buffer)
#+end_src
** iTerm integration
These are pretty much all borrowed from [https://sam217pa.github.io/2016/09/01/emacs-iterm-integration/].
#+begin_src emacs-lisp
(defun iterm-focus ()
  (interactive)
  (do-applescript
   " do shell script \"open -a iTerm\"\n"))

(defun iterm-goto-filedir-or-home ()
  "Go to present working dir and focus iterm"
  (interactive)
  (do-applescript
   (concat
    " tell application \"iTerm2\"\n"
    "   tell the current session of current window\n"
    (format "     write text \"cd %s\" \n"
            ;; string escaping madness for applescript
            (replace-regexp-in-string "\\\\" "\\\\\\\\"
                                      (shell-quote-argument (or default-directory "~"))))
    "   end tell\n"
    " end tell\n"
    " do shell script \"open -a iTerm\"\n")))
#+end_src

